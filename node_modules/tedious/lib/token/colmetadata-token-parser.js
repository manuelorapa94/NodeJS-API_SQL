"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _metadataParser = _interopRequireDefault(require("../metadata-parser"));
var _token = require("./token");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function readTableName(parser, options, metadata, callback) {
  if (metadata.type.hasTableName) {
    if (options.tdsVersion >= '7_2') {
      parser.readUInt8(numberOfTableNameParts => {
        const tableName = [];
        let i = 0;
        function next(done) {
          if (numberOfTableNameParts === i) {
            return done();
          }
          parser.readUsVarChar(part => {
            tableName.push(part);
            i++;
            next(done);
          });
        }
        next(() => {
          callback(tableName);
        });
      });
    } else {
      parser.readUsVarChar(callback);
    }
  } else {
    callback(undefined);
  }
}
function readColumnName(parser, options, index, metadata, callback) {
  parser.readBVarChar(colName => {
    if (options.columnNameReplacer) {
      callback(options.columnNameReplacer(colName, index, metadata));
    } else if (options.camelCaseColumns) {
      callback(colName.replace(/^[A-Z]/, function (s) {
        return s.toLowerCase();
      }));
    } else {
      callback(colName);
    }
  });
}
function readColumn(parser, options, index, callback) {
  (0, _metadataParser.default)(parser, options, metadata => {
    readTableName(parser, options, metadata, tableName => {
      readColumnName(parser, options, index, metadata, colName => {
        callback({
          userType: metadata.userType,
          flags: metadata.flags,
          type: metadata.type,
          collation: metadata.collation,
          precision: metadata.precision,
          scale: metadata.scale,
          udtInfo: metadata.udtInfo,
          dataLength: metadata.dataLength,
          schema: metadata.schema,
          colName: colName,
          tableName: tableName
        });
      });
    });
  });
}
async function colMetadataParser(parser) {
  while (parser.buffer.length - parser.position < 2) {
    await parser.streamBuffer.waitForChunk();
  }
  const columnCount = parser.buffer.readUInt16LE(parser.position);
  parser.position += 2;
  const columns = [];
  for (let i = 0; i < columnCount; i++) {
    let column;
    readColumn(parser, parser.options, i, c => {
      column = c;
    });
    while (parser.suspended) {
      await parser.streamBuffer.waitForChunk();
      parser.suspended = false;
      const next = parser.next;
      next();
    }
    columns.push(column);
  }
  return new _token.ColMetadataToken(columns);
}
var _default = colMetadataParser;
exports.default = _default;
module.exports = colMetadataParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbWV0YWRhdGFQYXJzZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90b2tlbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwicmVhZFRhYmxlTmFtZSIsInBhcnNlciIsIm9wdGlvbnMiLCJtZXRhZGF0YSIsImNhbGxiYWNrIiwidHlwZSIsImhhc1RhYmxlTmFtZSIsInRkc1ZlcnNpb24iLCJyZWFkVUludDgiLCJudW1iZXJPZlRhYmxlTmFtZVBhcnRzIiwidGFibGVOYW1lIiwiaSIsIm5leHQiLCJkb25lIiwicmVhZFVzVmFyQ2hhciIsInBhcnQiLCJwdXNoIiwidW5kZWZpbmVkIiwicmVhZENvbHVtbk5hbWUiLCJpbmRleCIsInJlYWRCVmFyQ2hhciIsImNvbE5hbWUiLCJjb2x1bW5OYW1lUmVwbGFjZXIiLCJjYW1lbENhc2VDb2x1bW5zIiwicmVwbGFjZSIsInMiLCJ0b0xvd2VyQ2FzZSIsInJlYWRDb2x1bW4iLCJtZXRhZGF0YVBhcnNlIiwidXNlclR5cGUiLCJmbGFncyIsImNvbGxhdGlvbiIsInByZWNpc2lvbiIsInNjYWxlIiwidWR0SW5mbyIsImRhdGFMZW5ndGgiLCJzY2hlbWEiLCJjb2xNZXRhZGF0YVBhcnNlciIsImJ1ZmZlciIsImxlbmd0aCIsInBvc2l0aW9uIiwic3RyZWFtQnVmZmVyIiwid2FpdEZvckNodW5rIiwiY29sdW1uQ291bnQiLCJyZWFkVUludDE2TEUiLCJjb2x1bW5zIiwiY29sdW1uIiwiYyIsInN1c3BlbmRlZCIsIkNvbE1ldGFkYXRhVG9rZW4iLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdG9rZW4vY29sbWV0YWRhdGEtdG9rZW4tcGFyc2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtZXRhZGF0YVBhcnNlLCB7IE1ldGFkYXRhIH0gZnJvbSAnLi4vbWV0YWRhdGEtcGFyc2VyJztcblxuaW1wb3J0IFBhcnNlciwgeyBQYXJzZXJPcHRpb25zIH0gZnJvbSAnLi9zdHJlYW0tcGFyc2VyJztcbmltcG9ydCB7IENvbE1ldGFkYXRhVG9rZW4gfSBmcm9tICcuL3Rva2VuJztcblxuZXhwb3J0IGludGVyZmFjZSBDb2x1bW5NZXRhZGF0YSBleHRlbmRzIE1ldGFkYXRhIHtcbiAgLyoqXG4gICAqIFRoZSBjb2x1bW4ncyBuYW1l44CCXG4gICAqL1xuICBjb2xOYW1lOiBzdHJpbmc7XG5cbiAgdGFibGVOYW1lPzogc3RyaW5nIHwgc3RyaW5nW10gfCB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRUYWJsZU5hbWUocGFyc2VyOiBQYXJzZXIsIG9wdGlvbnM6IFBhcnNlck9wdGlvbnMsIG1ldGFkYXRhOiBNZXRhZGF0YSwgY2FsbGJhY2s6ICh0YWJsZU5hbWU/OiBzdHJpbmcgfCBzdHJpbmdbXSkgPT4gdm9pZCkge1xuICBpZiAobWV0YWRhdGEudHlwZS5oYXNUYWJsZU5hbWUpIHtcbiAgICBpZiAob3B0aW9ucy50ZHNWZXJzaW9uID49ICc3XzInKSB7XG4gICAgICBwYXJzZXIucmVhZFVJbnQ4KChudW1iZXJPZlRhYmxlTmFtZVBhcnRzKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYmxlTmFtZTogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZ1bmN0aW9uIG5leHQoZG9uZTogKCkgPT4gdm9pZCkge1xuICAgICAgICAgIGlmIChudW1iZXJPZlRhYmxlTmFtZVBhcnRzID09PSBpKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcnNlci5yZWFkVXNWYXJDaGFyKChwYXJ0KSA9PiB7XG4gICAgICAgICAgICB0YWJsZU5hbWUucHVzaChwYXJ0KTtcblxuICAgICAgICAgICAgaSsrO1xuXG4gICAgICAgICAgICBuZXh0KGRvbmUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dCgoKSA9PiB7XG4gICAgICAgICAgY2FsbGJhY2sodGFibGVOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VyLnJlYWRVc1ZhckNoYXIoY2FsbGJhY2spO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjayh1bmRlZmluZWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlYWRDb2x1bW5OYW1lKHBhcnNlcjogUGFyc2VyLCBvcHRpb25zOiBQYXJzZXJPcHRpb25zLCBpbmRleDogbnVtYmVyLCBtZXRhZGF0YTogTWV0YWRhdGEsIGNhbGxiYWNrOiAoY29sTmFtZTogc3RyaW5nKSA9PiB2b2lkKSB7XG4gIHBhcnNlci5yZWFkQlZhckNoYXIoKGNvbE5hbWUpID0+IHtcbiAgICBpZiAob3B0aW9ucy5jb2x1bW5OYW1lUmVwbGFjZXIpIHtcbiAgICAgIGNhbGxiYWNrKG9wdGlvbnMuY29sdW1uTmFtZVJlcGxhY2VyKGNvbE5hbWUsIGluZGV4LCBtZXRhZGF0YSkpO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jYW1lbENhc2VDb2x1bW5zKSB7XG4gICAgICBjYWxsYmFjayhjb2xOYW1lLnJlcGxhY2UoL15bQS1aXS8sIGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgcmV0dXJuIHMudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soY29sTmFtZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVhZENvbHVtbihwYXJzZXI6IFBhcnNlciwgb3B0aW9uczogUGFyc2VyT3B0aW9ucywgaW5kZXg6IG51bWJlciwgY2FsbGJhY2s6IChjb2x1bW46IENvbHVtbk1ldGFkYXRhKSA9PiB2b2lkKSB7XG4gIG1ldGFkYXRhUGFyc2UocGFyc2VyLCBvcHRpb25zLCAobWV0YWRhdGEpID0+IHtcbiAgICByZWFkVGFibGVOYW1lKHBhcnNlciwgb3B0aW9ucywgbWV0YWRhdGEsICh0YWJsZU5hbWUpID0+IHtcbiAgICAgIHJlYWRDb2x1bW5OYW1lKHBhcnNlciwgb3B0aW9ucywgaW5kZXgsIG1ldGFkYXRhLCAoY29sTmFtZSkgPT4ge1xuICAgICAgICBjYWxsYmFjayh7XG4gICAgICAgICAgdXNlclR5cGU6IG1ldGFkYXRhLnVzZXJUeXBlLFxuICAgICAgICAgIGZsYWdzOiBtZXRhZGF0YS5mbGFncyxcbiAgICAgICAgICB0eXBlOiBtZXRhZGF0YS50eXBlLFxuICAgICAgICAgIGNvbGxhdGlvbjogbWV0YWRhdGEuY29sbGF0aW9uLFxuICAgICAgICAgIHByZWNpc2lvbjogbWV0YWRhdGEucHJlY2lzaW9uLFxuICAgICAgICAgIHNjYWxlOiBtZXRhZGF0YS5zY2FsZSxcbiAgICAgICAgICB1ZHRJbmZvOiBtZXRhZGF0YS51ZHRJbmZvLFxuICAgICAgICAgIGRhdGFMZW5ndGg6IG1ldGFkYXRhLmRhdGFMZW5ndGgsXG4gICAgICAgICAgc2NoZW1hOiBtZXRhZGF0YS5zY2hlbWEsXG4gICAgICAgICAgY29sTmFtZTogY29sTmFtZSxcbiAgICAgICAgICB0YWJsZU5hbWU6IHRhYmxlTmFtZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY29sTWV0YWRhdGFQYXJzZXIocGFyc2VyOiBQYXJzZXIpOiBQcm9taXNlPENvbE1ldGFkYXRhVG9rZW4+IHtcbiAgd2hpbGUgKHBhcnNlci5idWZmZXIubGVuZ3RoIC0gcGFyc2VyLnBvc2l0aW9uIDwgMikge1xuICAgIGF3YWl0IHBhcnNlci5zdHJlYW1CdWZmZXIud2FpdEZvckNodW5rKCk7XG4gIH1cblxuICBjb25zdCBjb2x1bW5Db3VudCA9IHBhcnNlci5idWZmZXIucmVhZFVJbnQxNkxFKHBhcnNlci5wb3NpdGlvbik7XG4gIHBhcnNlci5wb3NpdGlvbiArPSAyO1xuXG4gIGNvbnN0IGNvbHVtbnM6IENvbHVtbk1ldGFkYXRhW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5Db3VudDsgaSsrKSB7XG4gICAgbGV0IGNvbHVtbjogQ29sdW1uTWV0YWRhdGE7XG5cbiAgICByZWFkQ29sdW1uKHBhcnNlciwgcGFyc2VyLm9wdGlvbnMsIGksIChjKSA9PiB7XG4gICAgICBjb2x1bW4gPSBjO1xuICAgIH0pO1xuXG4gICAgd2hpbGUgKHBhcnNlci5zdXNwZW5kZWQpIHtcbiAgICAgIGF3YWl0IHBhcnNlci5zdHJlYW1CdWZmZXIud2FpdEZvckNodW5rKCk7XG5cbiAgICAgIHBhcnNlci5zdXNwZW5kZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IG5leHQgPSBwYXJzZXIubmV4dCE7XG5cbiAgICAgIG5leHQoKTtcbiAgICB9XG5cbiAgICBjb2x1bW5zLnB1c2goY29sdW1uISk7XG4gIH1cblxuICByZXR1cm4gbmV3IENvbE1ldGFkYXRhVG9rZW4oY29sdW1ucyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbE1ldGFkYXRhUGFyc2VyO1xubW9kdWxlLmV4cG9ydHMgPSBjb2xNZXRhZGF0YVBhcnNlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsZUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBR0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQTJDLFNBQUFELHVCQUFBRyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBVzNDLFNBQVNHLGFBQWFBLENBQUNDLE1BQWMsRUFBRUMsT0FBc0IsRUFBRUMsUUFBa0IsRUFBRUMsUUFBaUQsRUFBRTtFQUNwSSxJQUFJRCxRQUFRLENBQUNFLElBQUksQ0FBQ0MsWUFBWSxFQUFFO0lBQzlCLElBQUlKLE9BQU8sQ0FBQ0ssVUFBVSxJQUFJLEtBQUssRUFBRTtNQUMvQk4sTUFBTSxDQUFDTyxTQUFTLENBQUVDLHNCQUFzQixJQUFLO1FBQzNDLE1BQU1DLFNBQW1CLEdBQUcsRUFBRTtRQUU5QixJQUFJQyxDQUFDLEdBQUcsQ0FBQztRQUNULFNBQVNDLElBQUlBLENBQUNDLElBQWdCLEVBQUU7VUFDOUIsSUFBSUosc0JBQXNCLEtBQUtFLENBQUMsRUFBRTtZQUNoQyxPQUFPRSxJQUFJLENBQUMsQ0FBQztVQUNmO1VBRUFaLE1BQU0sQ0FBQ2EsYUFBYSxDQUFFQyxJQUFJLElBQUs7WUFDN0JMLFNBQVMsQ0FBQ00sSUFBSSxDQUFDRCxJQUFJLENBQUM7WUFFcEJKLENBQUMsRUFBRTtZQUVIQyxJQUFJLENBQUNDLElBQUksQ0FBQztVQUNaLENBQUMsQ0FBQztRQUNKO1FBRUFELElBQUksQ0FBQyxNQUFNO1VBQ1RSLFFBQVEsQ0FBQ00sU0FBUyxDQUFDO1FBQ3JCLENBQUMsQ0FBQztNQUNKLENBQUMsQ0FBQztJQUNKLENBQUMsTUFBTTtNQUNMVCxNQUFNLENBQUNhLGFBQWEsQ0FBQ1YsUUFBUSxDQUFDO0lBQ2hDO0VBQ0YsQ0FBQyxNQUFNO0lBQ0xBLFFBQVEsQ0FBQ2EsU0FBUyxDQUFDO0VBQ3JCO0FBQ0Y7QUFFQSxTQUFTQyxjQUFjQSxDQUFDakIsTUFBYyxFQUFFQyxPQUFzQixFQUFFaUIsS0FBYSxFQUFFaEIsUUFBa0IsRUFBRUMsUUFBbUMsRUFBRTtFQUN0SUgsTUFBTSxDQUFDbUIsWUFBWSxDQUFFQyxPQUFPLElBQUs7SUFDL0IsSUFBSW5CLE9BQU8sQ0FBQ29CLGtCQUFrQixFQUFFO01BQzlCbEIsUUFBUSxDQUFDRixPQUFPLENBQUNvQixrQkFBa0IsQ0FBQ0QsT0FBTyxFQUFFRixLQUFLLEVBQUVoQixRQUFRLENBQUMsQ0FBQztJQUNoRSxDQUFDLE1BQU0sSUFBSUQsT0FBTyxDQUFDcUIsZ0JBQWdCLEVBQUU7TUFDbkNuQixRQUFRLENBQUNpQixPQUFPLENBQUNHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsVUFBU0MsQ0FBQyxFQUFFO1FBQzdDLE9BQU9BLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLE1BQU07TUFDTHRCLFFBQVEsQ0FBQ2lCLE9BQU8sQ0FBQztJQUNuQjtFQUNGLENBQUMsQ0FBQztBQUNKO0FBRUEsU0FBU00sVUFBVUEsQ0FBQzFCLE1BQWMsRUFBRUMsT0FBc0IsRUFBRWlCLEtBQWEsRUFBRWYsUUFBMEMsRUFBRTtFQUNySCxJQUFBd0IsdUJBQWEsRUFBQzNCLE1BQU0sRUFBRUMsT0FBTyxFQUFHQyxRQUFRLElBQUs7SUFDM0NILGFBQWEsQ0FBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBR08sU0FBUyxJQUFLO01BQ3REUSxjQUFjLENBQUNqQixNQUFNLEVBQUVDLE9BQU8sRUFBRWlCLEtBQUssRUFBRWhCLFFBQVEsRUFBR2tCLE9BQU8sSUFBSztRQUM1RGpCLFFBQVEsQ0FBQztVQUNQeUIsUUFBUSxFQUFFMUIsUUFBUSxDQUFDMEIsUUFBUTtVQUMzQkMsS0FBSyxFQUFFM0IsUUFBUSxDQUFDMkIsS0FBSztVQUNyQnpCLElBQUksRUFBRUYsUUFBUSxDQUFDRSxJQUFJO1VBQ25CMEIsU0FBUyxFQUFFNUIsUUFBUSxDQUFDNEIsU0FBUztVQUM3QkMsU0FBUyxFQUFFN0IsUUFBUSxDQUFDNkIsU0FBUztVQUM3QkMsS0FBSyxFQUFFOUIsUUFBUSxDQUFDOEIsS0FBSztVQUNyQkMsT0FBTyxFQUFFL0IsUUFBUSxDQUFDK0IsT0FBTztVQUN6QkMsVUFBVSxFQUFFaEMsUUFBUSxDQUFDZ0MsVUFBVTtVQUMvQkMsTUFBTSxFQUFFakMsUUFBUSxDQUFDaUMsTUFBTTtVQUN2QmYsT0FBTyxFQUFFQSxPQUFPO1VBQ2hCWCxTQUFTLEVBQUVBO1FBQ2IsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0o7QUFFQSxlQUFlMkIsaUJBQWlCQSxDQUFDcEMsTUFBYyxFQUE2QjtFQUMxRSxPQUFPQSxNQUFNLENBQUNxQyxNQUFNLENBQUNDLE1BQU0sR0FBR3RDLE1BQU0sQ0FBQ3VDLFFBQVEsR0FBRyxDQUFDLEVBQUU7SUFDakQsTUFBTXZDLE1BQU0sQ0FBQ3dDLFlBQVksQ0FBQ0MsWUFBWSxDQUFDLENBQUM7RUFDMUM7RUFFQSxNQUFNQyxXQUFXLEdBQUcxQyxNQUFNLENBQUNxQyxNQUFNLENBQUNNLFlBQVksQ0FBQzNDLE1BQU0sQ0FBQ3VDLFFBQVEsQ0FBQztFQUMvRHZDLE1BQU0sQ0FBQ3VDLFFBQVEsSUFBSSxDQUFDO0VBRXBCLE1BQU1LLE9BQXlCLEdBQUcsRUFBRTtFQUNwQyxLQUFLLElBQUlsQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdnQyxXQUFXLEVBQUVoQyxDQUFDLEVBQUUsRUFBRTtJQUNwQyxJQUFJbUMsTUFBc0I7SUFFMUJuQixVQUFVLENBQUMxQixNQUFNLEVBQUVBLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFUyxDQUFDLEVBQUdvQyxDQUFDLElBQUs7TUFDM0NELE1BQU0sR0FBR0MsQ0FBQztJQUNaLENBQUMsQ0FBQztJQUVGLE9BQU85QyxNQUFNLENBQUMrQyxTQUFTLEVBQUU7TUFDdkIsTUFBTS9DLE1BQU0sQ0FBQ3dDLFlBQVksQ0FBQ0MsWUFBWSxDQUFDLENBQUM7TUFFeEN6QyxNQUFNLENBQUMrQyxTQUFTLEdBQUcsS0FBSztNQUN4QixNQUFNcEMsSUFBSSxHQUFHWCxNQUFNLENBQUNXLElBQUs7TUFFekJBLElBQUksQ0FBQyxDQUFDO0lBQ1I7SUFFQWlDLE9BQU8sQ0FBQzdCLElBQUksQ0FBQzhCLE1BQU8sQ0FBQztFQUN2QjtFQUVBLE9BQU8sSUFBSUcsdUJBQWdCLENBQUNKLE9BQU8sQ0FBQztBQUN0QztBQUFDLElBQUFLLFFBQUEsR0FFY2IsaUJBQWlCO0FBQUFjLE9BQUEsQ0FBQXBELE9BQUEsR0FBQW1ELFFBQUE7QUFDaENFLE1BQU0sQ0FBQ0QsT0FBTyxHQUFHZCxpQkFBaUIifQ==