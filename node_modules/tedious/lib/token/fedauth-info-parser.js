"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _token = require("./token");
const FEDAUTHINFOID = {
  STSURL: 0x01,
  SPN: 0x02
};
function fedAuthInfoParser(parser, _options, callback) {
  parser.readUInt32LE(tokenLength => {
    parser.readBuffer(tokenLength, data => {
      let spn, stsurl;
      let offset = 0;
      const countOfInfoIDs = data.readUInt32LE(offset);
      offset += 4;
      for (let i = 0; i < countOfInfoIDs; i++) {
        const fedauthInfoID = data.readUInt8(offset);
        offset += 1;
        const fedAuthInfoDataLen = data.readUInt32LE(offset);
        offset += 4;
        const fedAuthInfoDataOffset = data.readUInt32LE(offset);
        offset += 4;
        switch (fedauthInfoID) {
          case FEDAUTHINFOID.SPN:
            spn = data.toString('ucs2', fedAuthInfoDataOffset, fedAuthInfoDataOffset + fedAuthInfoDataLen);
            break;
          case FEDAUTHINFOID.STSURL:
            stsurl = data.toString('ucs2', fedAuthInfoDataOffset, fedAuthInfoDataOffset + fedAuthInfoDataLen);
            break;

          // ignoring unknown fedauthinfo options
          default:
            break;
        }
      }
      callback(new _token.FedAuthInfoToken(spn, stsurl));
    });
  });
}
var _default = fedAuthInfoParser;
exports.default = _default;
module.exports = fedAuthInfoParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9rZW4iLCJyZXF1aXJlIiwiRkVEQVVUSElORk9JRCIsIlNUU1VSTCIsIlNQTiIsImZlZEF1dGhJbmZvUGFyc2VyIiwicGFyc2VyIiwiX29wdGlvbnMiLCJjYWxsYmFjayIsInJlYWRVSW50MzJMRSIsInRva2VuTGVuZ3RoIiwicmVhZEJ1ZmZlciIsImRhdGEiLCJzcG4iLCJzdHN1cmwiLCJvZmZzZXQiLCJjb3VudE9mSW5mb0lEcyIsImkiLCJmZWRhdXRoSW5mb0lEIiwicmVhZFVJbnQ4IiwiZmVkQXV0aEluZm9EYXRhTGVuIiwiZmVkQXV0aEluZm9EYXRhT2Zmc2V0IiwidG9TdHJpbmciLCJGZWRBdXRoSW5mb1Rva2VuIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b2tlbi9mZWRhdXRoLWluZm8tcGFyc2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYXJzZXIsIHsgUGFyc2VyT3B0aW9ucyB9IGZyb20gJy4vc3RyZWFtLXBhcnNlcic7XG5pbXBvcnQgeyBGZWRBdXRoSW5mb1Rva2VuIH0gZnJvbSAnLi90b2tlbic7XG5cbmNvbnN0IEZFREFVVEhJTkZPSUQgPSB7XG4gIFNUU1VSTDogMHgwMSxcbiAgU1BOOiAweDAyXG59O1xuXG5mdW5jdGlvbiBmZWRBdXRoSW5mb1BhcnNlcihwYXJzZXI6IFBhcnNlciwgX29wdGlvbnM6IFBhcnNlck9wdGlvbnMsIGNhbGxiYWNrOiAodG9rZW46IEZlZEF1dGhJbmZvVG9rZW4pID0+IHZvaWQpIHtcbiAgcGFyc2VyLnJlYWRVSW50MzJMRSgodG9rZW5MZW5ndGgpID0+IHtcbiAgICBwYXJzZXIucmVhZEJ1ZmZlcih0b2tlbkxlbmd0aCwgKGRhdGEpID0+IHtcbiAgICAgIGxldCBzcG46IHN0cmluZyB8IHVuZGVmaW5lZCwgc3RzdXJsOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICAgIGxldCBvZmZzZXQgPSAwO1xuXG4gICAgICBjb25zdCBjb3VudE9mSW5mb0lEcyA9IGRhdGEucmVhZFVJbnQzMkxFKG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gNDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudE9mSW5mb0lEczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGZlZGF1dGhJbmZvSUQgPSBkYXRhLnJlYWRVSW50OChvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gMTtcblxuICAgICAgICBjb25zdCBmZWRBdXRoSW5mb0RhdGFMZW4gPSBkYXRhLnJlYWRVSW50MzJMRShvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gNDtcblxuICAgICAgICBjb25zdCBmZWRBdXRoSW5mb0RhdGFPZmZzZXQgPSBkYXRhLnJlYWRVSW50MzJMRShvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gNDtcblxuICAgICAgICBzd2l0Y2ggKGZlZGF1dGhJbmZvSUQpIHtcbiAgICAgICAgICBjYXNlIEZFREFVVEhJTkZPSUQuU1BOOlxuICAgICAgICAgICAgc3BuID0gZGF0YS50b1N0cmluZygndWNzMicsIGZlZEF1dGhJbmZvRGF0YU9mZnNldCwgZmVkQXV0aEluZm9EYXRhT2Zmc2V0ICsgZmVkQXV0aEluZm9EYXRhTGVuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBGRURBVVRISU5GT0lELlNUU1VSTDpcbiAgICAgICAgICAgIHN0c3VybCA9IGRhdGEudG9TdHJpbmcoJ3VjczInLCBmZWRBdXRoSW5mb0RhdGFPZmZzZXQsIGZlZEF1dGhJbmZvRGF0YU9mZnNldCArIGZlZEF1dGhJbmZvRGF0YUxlbik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8vIGlnbm9yaW5nIHVua25vd24gZmVkYXV0aGluZm8gb3B0aW9uc1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhuZXcgRmVkQXV0aEluZm9Ub2tlbihzcG4sIHN0c3VybCkpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmVkQXV0aEluZm9QYXJzZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGZlZEF1dGhJbmZvUGFyc2VyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFFQSxNQUFNQyxhQUFhLEdBQUc7RUFDcEJDLE1BQU0sRUFBRSxJQUFJO0VBQ1pDLEdBQUcsRUFBRTtBQUNQLENBQUM7QUFFRCxTQUFTQyxpQkFBaUJBLENBQUNDLE1BQWMsRUFBRUMsUUFBdUIsRUFBRUMsUUFBMkMsRUFBRTtFQUMvR0YsTUFBTSxDQUFDRyxZQUFZLENBQUVDLFdBQVcsSUFBSztJQUNuQ0osTUFBTSxDQUFDSyxVQUFVLENBQUNELFdBQVcsRUFBR0UsSUFBSSxJQUFLO01BQ3ZDLElBQUlDLEdBQXVCLEVBQUVDLE1BQTBCO01BRXZELElBQUlDLE1BQU0sR0FBRyxDQUFDO01BRWQsTUFBTUMsY0FBYyxHQUFHSixJQUFJLENBQUNILFlBQVksQ0FBQ00sTUFBTSxDQUFDO01BQ2hEQSxNQUFNLElBQUksQ0FBQztNQUVYLEtBQUssSUFBSUUsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxjQUFjLEVBQUVDLENBQUMsRUFBRSxFQUFFO1FBQ3ZDLE1BQU1DLGFBQWEsR0FBR04sSUFBSSxDQUFDTyxTQUFTLENBQUNKLE1BQU0sQ0FBQztRQUM1Q0EsTUFBTSxJQUFJLENBQUM7UUFFWCxNQUFNSyxrQkFBa0IsR0FBR1IsSUFBSSxDQUFDSCxZQUFZLENBQUNNLE1BQU0sQ0FBQztRQUNwREEsTUFBTSxJQUFJLENBQUM7UUFFWCxNQUFNTSxxQkFBcUIsR0FBR1QsSUFBSSxDQUFDSCxZQUFZLENBQUNNLE1BQU0sQ0FBQztRQUN2REEsTUFBTSxJQUFJLENBQUM7UUFFWCxRQUFRRyxhQUFhO1VBQ25CLEtBQUtoQixhQUFhLENBQUNFLEdBQUc7WUFDcEJTLEdBQUcsR0FBR0QsSUFBSSxDQUFDVSxRQUFRLENBQUMsTUFBTSxFQUFFRCxxQkFBcUIsRUFBRUEscUJBQXFCLEdBQUdELGtCQUFrQixDQUFDO1lBQzlGO1VBRUYsS0FBS2xCLGFBQWEsQ0FBQ0MsTUFBTTtZQUN2QlcsTUFBTSxHQUFHRixJQUFJLENBQUNVLFFBQVEsQ0FBQyxNQUFNLEVBQUVELHFCQUFxQixFQUFFQSxxQkFBcUIsR0FBR0Qsa0JBQWtCLENBQUM7WUFDakc7O1VBRUY7VUFDQTtZQUNFO1FBQ0o7TUFDRjtNQUVBWixRQUFRLENBQUMsSUFBSWUsdUJBQWdCLENBQUNWLEdBQUcsRUFBRUMsTUFBTSxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0o7QUFBQyxJQUFBVSxRQUFBLEdBRWNuQixpQkFBaUI7QUFBQW9CLE9BQUEsQ0FBQUMsT0FBQSxHQUFBRixRQUFBO0FBQ2hDRyxNQUFNLENBQUNGLE9BQU8sR0FBR3BCLGlCQUFpQiJ9