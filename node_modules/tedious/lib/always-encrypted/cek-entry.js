"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CEKEntry = void 0;
// This code is based on the `mssql-jdbc` library published under the conditions of MIT license.
// Copyright (c) 2019 Microsoft Corporation

class CEKEntry {
  columnEncryptionKeyValues;
  ordinal;
  databaseId;
  cekId;
  cekVersion;
  cekMdVersion;
  constructor(ordinalVal) {
    this.ordinal = ordinalVal;
    this.databaseId = 0;
    this.cekId = 0;
    this.cekVersion = 0;
    this.cekMdVersion = Buffer.alloc(0);
    this.columnEncryptionKeyValues = [];
  }
  add(encryptedKey, dbId, keyId, keyVersion, mdVersion, keyPath, keyStoreName, algorithmName) {
    const encryptionKey = {
      encryptedKey,
      dbId,
      keyId,
      keyVersion,
      mdVersion,
      keyPath,
      keyStoreName,
      algorithmName
    };
    this.columnEncryptionKeyValues.push(encryptionKey);
    if (this.databaseId === 0) {
      this.databaseId = dbId;
      this.cekId = keyId;
      this.cekVersion = keyVersion;
      this.cekMdVersion = mdVersion;
    } else if (this.databaseId !== dbId || this.cekId !== keyId || this.cekVersion !== keyVersion || !this.cekMdVersion || !mdVersion || this.cekMdVersion.length !== mdVersion.length) {
      throw new Error('Invalid databaseId, cekId, cekVersion or cekMdVersion.');
    }
  }
}
exports.CEKEntry = CEKEntry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDRUtFbnRyeSIsImNvbHVtbkVuY3J5cHRpb25LZXlWYWx1ZXMiLCJvcmRpbmFsIiwiZGF0YWJhc2VJZCIsImNla0lkIiwiY2VrVmVyc2lvbiIsImNla01kVmVyc2lvbiIsImNvbnN0cnVjdG9yIiwib3JkaW5hbFZhbCIsIkJ1ZmZlciIsImFsbG9jIiwiYWRkIiwiZW5jcnlwdGVkS2V5IiwiZGJJZCIsImtleUlkIiwia2V5VmVyc2lvbiIsIm1kVmVyc2lvbiIsImtleVBhdGgiLCJrZXlTdG9yZU5hbWUiLCJhbGdvcml0aG1OYW1lIiwiZW5jcnlwdGlvbktleSIsInB1c2giLCJsZW5ndGgiLCJFcnJvciIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvYWx3YXlzLWVuY3J5cHRlZC9jZWstZW50cnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBjb2RlIGlzIGJhc2VkIG9uIHRoZSBgbXNzcWwtamRiY2AgbGlicmFyeSBwdWJsaXNoZWQgdW5kZXIgdGhlIGNvbmRpdGlvbnMgb2YgTUlUIGxpY2Vuc2UuXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTkgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG5cbmltcG9ydCB7IEVuY3J5cHRpb25LZXlJbmZvIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBDRUtFbnRyeSB7XG4gIGNvbHVtbkVuY3J5cHRpb25LZXlWYWx1ZXM6IEVuY3J5cHRpb25LZXlJbmZvW107XG4gIG9yZGluYWw6IG51bWJlcjtcbiAgZGF0YWJhc2VJZDogbnVtYmVyO1xuICBjZWtJZDogbnVtYmVyO1xuICBjZWtWZXJzaW9uOiBudW1iZXI7XG4gIGNla01kVmVyc2lvbjogQnVmZmVyO1xuXG4gIGNvbnN0cnVjdG9yKG9yZGluYWxWYWw6IG51bWJlcikge1xuICAgIHRoaXMub3JkaW5hbCA9IG9yZGluYWxWYWw7XG4gICAgdGhpcy5kYXRhYmFzZUlkID0gMDtcbiAgICB0aGlzLmNla0lkID0gMDtcbiAgICB0aGlzLmNla1ZlcnNpb24gPSAwO1xuICAgIHRoaXMuY2VrTWRWZXJzaW9uID0gQnVmZmVyLmFsbG9jKDApO1xuICAgIHRoaXMuY29sdW1uRW5jcnlwdGlvbktleVZhbHVlcyA9IFtdO1xuICB9XG5cbiAgYWRkKGVuY3J5cHRlZEtleTogQnVmZmVyLCBkYklkOiBudW1iZXIsIGtleUlkOiBudW1iZXIsIGtleVZlcnNpb246IG51bWJlciwgbWRWZXJzaW9uOiBCdWZmZXIsIGtleVBhdGg6IHN0cmluZywga2V5U3RvcmVOYW1lOiBzdHJpbmcsIGFsZ29yaXRobU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGVuY3J5cHRpb25LZXk6IEVuY3J5cHRpb25LZXlJbmZvID0ge1xuICAgICAgZW5jcnlwdGVkS2V5LFxuICAgICAgZGJJZCxcbiAgICAgIGtleUlkLFxuICAgICAga2V5VmVyc2lvbixcbiAgICAgIG1kVmVyc2lvbixcbiAgICAgIGtleVBhdGgsXG4gICAgICBrZXlTdG9yZU5hbWUsXG4gICAgICBhbGdvcml0aG1OYW1lLFxuICAgIH07XG5cbiAgICB0aGlzLmNvbHVtbkVuY3J5cHRpb25LZXlWYWx1ZXMucHVzaChlbmNyeXB0aW9uS2V5KTtcblxuICAgIGlmICh0aGlzLmRhdGFiYXNlSWQgPT09IDApIHtcbiAgICAgIHRoaXMuZGF0YWJhc2VJZCA9IGRiSWQ7XG4gICAgICB0aGlzLmNla0lkID0ga2V5SWQ7XG4gICAgICB0aGlzLmNla1ZlcnNpb24gPSBrZXlWZXJzaW9uO1xuICAgICAgdGhpcy5jZWtNZFZlcnNpb24gPSBtZFZlcnNpb247XG4gICAgfSBlbHNlIGlmICgodGhpcy5kYXRhYmFzZUlkICE9PSBkYklkKSB8fCAodGhpcy5jZWtJZCAhPT0ga2V5SWQpIHx8ICh0aGlzLmNla1ZlcnNpb24gIT09IGtleVZlcnNpb24pIHx8ICF0aGlzLmNla01kVmVyc2lvbiB8fCAhbWRWZXJzaW9uIHx8IHRoaXMuY2VrTWRWZXJzaW9uLmxlbmd0aCAhPT0gbWRWZXJzaW9uLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRhdGFiYXNlSWQsIGNla0lkLCBjZWtWZXJzaW9uIG9yIGNla01kVmVyc2lvbi4nKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTs7QUFJTyxNQUFNQSxRQUFRLENBQUM7RUFDcEJDLHlCQUF5QjtFQUN6QkMsT0FBTztFQUNQQyxVQUFVO0VBQ1ZDLEtBQUs7RUFDTEMsVUFBVTtFQUNWQyxZQUFZO0VBRVpDLFdBQVdBLENBQUNDLFVBQWtCLEVBQUU7SUFDOUIsSUFBSSxDQUFDTixPQUFPLEdBQUdNLFVBQVU7SUFDekIsSUFBSSxDQUFDTCxVQUFVLEdBQUcsQ0FBQztJQUNuQixJQUFJLENBQUNDLEtBQUssR0FBRyxDQUFDO0lBQ2QsSUFBSSxDQUFDQyxVQUFVLEdBQUcsQ0FBQztJQUNuQixJQUFJLENBQUNDLFlBQVksR0FBR0csTUFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ25DLElBQUksQ0FBQ1QseUJBQXlCLEdBQUcsRUFBRTtFQUNyQztFQUVBVSxHQUFHQSxDQUFDQyxZQUFvQixFQUFFQyxJQUFZLEVBQUVDLEtBQWEsRUFBRUMsVUFBa0IsRUFBRUMsU0FBaUIsRUFBRUMsT0FBZSxFQUFFQyxZQUFvQixFQUFFQyxhQUFxQixFQUFRO0lBQ2hLLE1BQU1DLGFBQWdDLEdBQUc7TUFDdkNSLFlBQVk7TUFDWkMsSUFBSTtNQUNKQyxLQUFLO01BQ0xDLFVBQVU7TUFDVkMsU0FBUztNQUNUQyxPQUFPO01BQ1BDLFlBQVk7TUFDWkM7SUFDRixDQUFDO0lBRUQsSUFBSSxDQUFDbEIseUJBQXlCLENBQUNvQixJQUFJLENBQUNELGFBQWEsQ0FBQztJQUVsRCxJQUFJLElBQUksQ0FBQ2pCLFVBQVUsS0FBSyxDQUFDLEVBQUU7TUFDekIsSUFBSSxDQUFDQSxVQUFVLEdBQUdVLElBQUk7TUFDdEIsSUFBSSxDQUFDVCxLQUFLLEdBQUdVLEtBQUs7TUFDbEIsSUFBSSxDQUFDVCxVQUFVLEdBQUdVLFVBQVU7TUFDNUIsSUFBSSxDQUFDVCxZQUFZLEdBQUdVLFNBQVM7SUFDL0IsQ0FBQyxNQUFNLElBQUssSUFBSSxDQUFDYixVQUFVLEtBQUtVLElBQUksSUFBTSxJQUFJLENBQUNULEtBQUssS0FBS1UsS0FBTSxJQUFLLElBQUksQ0FBQ1QsVUFBVSxLQUFLVSxVQUFXLElBQUksQ0FBQyxJQUFJLENBQUNULFlBQVksSUFBSSxDQUFDVSxTQUFTLElBQUksSUFBSSxDQUFDVixZQUFZLENBQUNnQixNQUFNLEtBQUtOLFNBQVMsQ0FBQ00sTUFBTSxFQUFFO01BQ3hMLE1BQU0sSUFBSUMsS0FBSyxDQUFDLHdEQUF3RCxDQUFDO0lBQzNFO0VBQ0Y7QUFDRjtBQUFDQyxPQUFBLENBQUF4QixRQUFBLEdBQUFBLFFBQUEifQ==