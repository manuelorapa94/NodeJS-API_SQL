"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SQLServerStatementColumnEncryptionSetting = exports.SQLServerEncryptionType = exports.DescribeParameterEncryptionResultSet2 = exports.DescribeParameterEncryptionResultSet1 = void 0;
// This code is based on the `mssql-jdbc` library published under the conditions of MIT license.
// Copyright (c) 2019 Microsoft Corporation
let SQLServerEncryptionType = /*#__PURE__*/function (SQLServerEncryptionType) {
  SQLServerEncryptionType[SQLServerEncryptionType["Deterministic"] = 1] = "Deterministic";
  SQLServerEncryptionType[SQLServerEncryptionType["Randomized"] = 2] = "Randomized";
  SQLServerEncryptionType[SQLServerEncryptionType["PlainText"] = 0] = "PlainText";
  return SQLServerEncryptionType;
}({});
exports.SQLServerEncryptionType = SQLServerEncryptionType;
// Fields in the first resultset of "sp_describe_parameter_encryption"
// We expect the server to return the fields in the resultset in the same order as mentioned below.
// If the server changes the below order, then transparent parameter encryption will break.
let DescribeParameterEncryptionResultSet1 = /*#__PURE__*/function (DescribeParameterEncryptionResultSet1) {
  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyOrdinal"] = 0] = "KeyOrdinal";
  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["DbId"] = 1] = "DbId";
  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyId"] = 2] = "KeyId";
  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyVersion"] = 3] = "KeyVersion";
  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyMdVersion"] = 4] = "KeyMdVersion";
  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["EncryptedKey"] = 5] = "EncryptedKey";
  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["ProviderName"] = 6] = "ProviderName";
  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyPath"] = 7] = "KeyPath";
  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyEncryptionAlgorithm"] = 8] = "KeyEncryptionAlgorithm";
  return DescribeParameterEncryptionResultSet1;
}({}); // Fields in the second resultset of "sp_describe_parameter_encryption"
// We expect the server to return the fields in the resultset in the same order as mentioned below.
// If the server changes the below order, then transparent parameter encryption will break.
exports.DescribeParameterEncryptionResultSet1 = DescribeParameterEncryptionResultSet1;
let DescribeParameterEncryptionResultSet2 = /*#__PURE__*/function (DescribeParameterEncryptionResultSet2) {
  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ParameterOrdinal"] = 0] = "ParameterOrdinal";
  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ParameterName"] = 1] = "ParameterName";
  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ColumnEncryptionAlgorithm"] = 2] = "ColumnEncryptionAlgorithm";
  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ColumnEncrytionType"] = 3] = "ColumnEncrytionType";
  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ColumnEncryptionKeyOrdinal"] = 4] = "ColumnEncryptionKeyOrdinal";
  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["NormalizationRuleVersion"] = 5] = "NormalizationRuleVersion";
  return DescribeParameterEncryptionResultSet2;
}({});
exports.DescribeParameterEncryptionResultSet2 = DescribeParameterEncryptionResultSet2;
let SQLServerStatementColumnEncryptionSetting = /*#__PURE__*/function (SQLServerStatementColumnEncryptionSetting) {
  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting["UseConnectionSetting"] = 0] = "UseConnectionSetting";
  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting["Enabled"] = 1] = "Enabled";
  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting["ResultSetOnly"] = 2] = "ResultSetOnly";
  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting["Disabled"] = 3] = "Disabled";
  return SQLServerStatementColumnEncryptionSetting;
}({});
exports.SQLServerStatementColumnEncryptionSetting = SQLServerStatementColumnEncryptionSetting;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTUUxTZXJ2ZXJFbmNyeXB0aW9uVHlwZSIsImV4cG9ydHMiLCJEZXNjcmliZVBhcmFtZXRlckVuY3J5cHRpb25SZXN1bHRTZXQxIiwiRGVzY3JpYmVQYXJhbWV0ZXJFbmNyeXB0aW9uUmVzdWx0U2V0MiIsIlNRTFNlcnZlclN0YXRlbWVudENvbHVtbkVuY3J5cHRpb25TZXR0aW5nIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Fsd2F5cy1lbmNyeXB0ZWQvdHlwZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBjb2RlIGlzIGJhc2VkIG9uIHRoZSBgbXNzcWwtamRiY2AgbGlicmFyeSBwdWJsaXNoZWQgdW5kZXIgdGhlIGNvbmRpdGlvbnMgb2YgTUlUIGxpY2Vuc2UuXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTkgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG5cbmltcG9ydCB7IENFS0VudHJ5IH0gZnJvbSAnLi9jZWstZW50cnknO1xuaW1wb3J0IHsgQmFzZU1ldGFkYXRhIH0gZnJvbSAnLi4vbWV0YWRhdGEtcGFyc2VyJztcblxuZXhwb3J0IGludGVyZmFjZSBFbmNyeXB0aW9uS2V5SW5mbyB7XG4gIGVuY3J5cHRlZEtleTogQnVmZmVyO1xuICBkYklkOiBudW1iZXI7XG4gIGtleUlkOiBudW1iZXI7XG4gIGtleVZlcnNpb246IG51bWJlcjtcbiAgbWRWZXJzaW9uOiBCdWZmZXI7XG4gIGtleVBhdGg6IHN0cmluZztcbiAga2V5U3RvcmVOYW1lOiBzdHJpbmc7XG4gIGFsZ29yaXRobU5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gU1FMU2VydmVyRW5jcnlwdGlvblR5cGUge1xuICBEZXRlcm1pbmlzdGljID0gMSxcbiAgUmFuZG9taXplZCA9IDIsXG4gIFBsYWluVGV4dCA9IDAsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5jcnlwdGlvbkFsZ29yaXRobSB7XG4gIGVuY3J5cHREYXRhOiAocGxhaW5UZXh0OiBCdWZmZXIpID0+IEJ1ZmZlcjtcbiAgZGVjcnlwdERhdGE6IChjaXBoZXJUZXh0OiBCdWZmZXIpID0+IEJ1ZmZlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDcnlwdG9NZXRhZGF0YSB7XG4gIGNla0VudHJ5PzogQ0VLRW50cnk7XG4gIGNpcGhlckFsZ29yaXRobUlkOiBudW1iZXI7XG4gIGNpcGhlckFsZ29yaXRobU5hbWU/OiBzdHJpbmc7XG4gIG5vcm1hbGl6YXRpb25SdWxlVmVyc2lvbjogQnVmZmVyO1xuICBlbmNyeXB0aW9uS2V5SW5mbz86IEVuY3J5cHRpb25LZXlJbmZvO1xuICBvcmRpbmFsOiBudW1iZXI7XG4gIGVuY3J5cHRpb25UeXBlOiBTUUxTZXJ2ZXJFbmNyeXB0aW9uVHlwZTtcbiAgY2lwaGVyQWxnb3JpdGhtPzogRW5jcnlwdGlvbkFsZ29yaXRobTtcbiAgYmFzZVR5cGVJbmZvPzogQmFzZU1ldGFkYXRhO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhhc2hNYXA8VD4ge1xuICBbaGFzaDogc3RyaW5nXTogVDtcbn1cblxuXG4vLyBGaWVsZHMgaW4gdGhlIGZpcnN0IHJlc3VsdHNldCBvZiBcInNwX2Rlc2NyaWJlX3BhcmFtZXRlcl9lbmNyeXB0aW9uXCJcbi8vIFdlIGV4cGVjdCB0aGUgc2VydmVyIHRvIHJldHVybiB0aGUgZmllbGRzIGluIHRoZSByZXN1bHRzZXQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgbWVudGlvbmVkIGJlbG93LlxuLy8gSWYgdGhlIHNlcnZlciBjaGFuZ2VzIHRoZSBiZWxvdyBvcmRlciwgdGhlbiB0cmFuc3BhcmVudCBwYXJhbWV0ZXIgZW5jcnlwdGlvbiB3aWxsIGJyZWFrLlxuZXhwb3J0IGVudW0gRGVzY3JpYmVQYXJhbWV0ZXJFbmNyeXB0aW9uUmVzdWx0U2V0MSB7XG4gIEtleU9yZGluYWwsXG4gIERiSWQsXG4gIEtleUlkLFxuICBLZXlWZXJzaW9uLFxuICBLZXlNZFZlcnNpb24sXG4gIEVuY3J5cHRlZEtleSxcbiAgUHJvdmlkZXJOYW1lLFxuICBLZXlQYXRoLFxuICBLZXlFbmNyeXB0aW9uQWxnb3JpdGhtXG59XG5cblxuLy8gRmllbGRzIGluIHRoZSBzZWNvbmQgcmVzdWx0c2V0IG9mIFwic3BfZGVzY3JpYmVfcGFyYW1ldGVyX2VuY3J5cHRpb25cIlxuLy8gV2UgZXhwZWN0IHRoZSBzZXJ2ZXIgdG8gcmV0dXJuIHRoZSBmaWVsZHMgaW4gdGhlIHJlc3VsdHNldCBpbiB0aGUgc2FtZSBvcmRlciBhcyBtZW50aW9uZWQgYmVsb3cuXG4vLyBJZiB0aGUgc2VydmVyIGNoYW5nZXMgdGhlIGJlbG93IG9yZGVyLCB0aGVuIHRyYW5zcGFyZW50IHBhcmFtZXRlciBlbmNyeXB0aW9uIHdpbGwgYnJlYWsuXG5leHBvcnQgZW51bSBEZXNjcmliZVBhcmFtZXRlckVuY3J5cHRpb25SZXN1bHRTZXQyIHtcbiAgUGFyYW1ldGVyT3JkaW5hbCxcbiAgUGFyYW1ldGVyTmFtZSxcbiAgQ29sdW1uRW5jcnlwdGlvbkFsZ29yaXRobSxcbiAgQ29sdW1uRW5jcnl0aW9uVHlwZSxcbiAgQ29sdW1uRW5jcnlwdGlvbktleU9yZGluYWwsXG4gIE5vcm1hbGl6YXRpb25SdWxlVmVyc2lvblxufVxuXG5leHBvcnQgZW51bSBTUUxTZXJ2ZXJTdGF0ZW1lbnRDb2x1bW5FbmNyeXB0aW9uU2V0dGluZyB7XG4gIC8qKlxuICAgKiBpZiBcIkNvbHVtbiBFbmNyeXB0aW9uIFNldHRpbmc9RW5hYmxlZFwiIGluIHRoZSBjb25uZWN0aW9uIHN0cmluZywgdXNlIEVuYWJsZWQuIE90aGVyd2lzZSwgbWFwcyB0byBEaXNhYmxlZC5cbiAgICovXG4gIFVzZUNvbm5lY3Rpb25TZXR0aW5nLFxuICAvKipcbiAgICogRW5hYmxlcyBUQ0UgZm9yIHRoZSBjb21tYW5kLiBPdmVycmlkZXMgdGhlIGNvbm5lY3Rpb24gbGV2ZWwgc2V0dGluZyBmb3IgdGhpcyBjb21tYW5kLlxuICAgKi9cbiAgRW5hYmxlZCxcbiAgLyoqXG4gICAqIFBhcmFtZXRlcnMgd2lsbCBub3QgYmUgZW5jcnlwdGVkLCBvbmx5IHRoZSBSZXN1bHRTZXQgd2lsbCBiZSBkZWNyeXB0ZWQuIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIGZvciBxdWVyaWVzIHRoYXRcbiAgICogZG8gbm90IHBhc3MgYW55IGVuY3J5cHRlZCBpbnB1dCBwYXJhbWV0ZXJzLiBPdmVycmlkZXMgdGhlIGNvbm5lY3Rpb24gbGV2ZWwgc2V0dGluZyBmb3IgdGhpcyBjb21tYW5kLlxuICAgKi9cbiAgUmVzdWx0U2V0T25seSxcbiAgLyoqXG4gICAqIERpc2FibGVzIFRDRSBmb3IgdGhlIGNvbW1hbmQuT3ZlcnJpZGVzIHRoZSBjb25uZWN0aW9uIGxldmVsIHNldHRpbmcgZm9yIHRoaXMgY29tbWFuZC5cbiAgICovXG4gIERpc2FibGVkLFxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQUEsSUFnQllBLHVCQUF1QiwwQkFBdkJBLHVCQUF1QjtFQUF2QkEsdUJBQXVCLENBQXZCQSx1QkFBdUI7RUFBdkJBLHVCQUF1QixDQUF2QkEsdUJBQXVCO0VBQXZCQSx1QkFBdUIsQ0FBdkJBLHVCQUF1QjtFQUFBLE9BQXZCQSx1QkFBdUI7QUFBQTtBQUFBQyxPQUFBLENBQUFELHVCQUFBLEdBQUFBLHVCQUFBO0FBNEJuQztBQUNBO0FBQ0E7QUFBQSxJQUNZRSxxQ0FBcUMsMEJBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBQSxPQUFyQ0EscUNBQXFDO0FBQUEsT0FhakQ7QUFDQTtBQUNBO0FBQUFELE9BQUEsQ0FBQUMscUNBQUEsR0FBQUEscUNBQUE7QUFBQSxJQUNZQyxxQ0FBcUMsMEJBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBQSxPQUFyQ0EscUNBQXFDO0FBQUE7QUFBQUYsT0FBQSxDQUFBRSxxQ0FBQSxHQUFBQSxxQ0FBQTtBQUFBLElBU3JDQyx5Q0FBeUMsMEJBQXpDQSx5Q0FBeUM7RUFBekNBLHlDQUF5QyxDQUF6Q0EseUNBQXlDO0VBQXpDQSx5Q0FBeUMsQ0FBekNBLHlDQUF5QztFQUF6Q0EseUNBQXlDLENBQXpDQSx5Q0FBeUM7RUFBekNBLHlDQUF5QyxDQUF6Q0EseUNBQXlDO0VBQUEsT0FBekNBLHlDQUF5QztBQUFBO0FBQUFILE9BQUEsQ0FBQUcseUNBQUEsR0FBQUEseUNBQUEifQ==